makeCacheMatrix <- function(x = matrix()) {
m <- NULL #set the inverse to null
set <- function(y) { #caches matrix y to x and inverse matrix m to null
x <<- y
m <<- NULL
}
get <- function() x #returns the cached matrix x
setinverse <- function(inverse) m <<- inverse #sets the inverse matrix inverse to m
getinverse <- function() m #returns the inverse matrix m
list(set = set, get = get,
setinverse = setinverse,
getmean = getinverse)
}
cacheSolve <- function(x, ...) { #takes matrix x and additional arguments for the solve function
m <- x$getinverse() #calls the getinverse function of matrix x and sets the result to local variable m
if(!is.null(m)) { #if m isnt null
message("getting cached data") #return message
return(m) #return cached inverse
}
data <- x$get() #if m is null, set data equal to matrix x
m <- solve(data, ...) #set local variable m to inverse of data and pass solve additional arguments
x$setmean(m) #set global value of m to inverse of data
m #return calculated inverse
}
?matrix
a = matrix(1:4,2,2)
a
solve(x)
solve(a)
b = makeCacheMatrix(a)
c = cacheSolve(b)
c = cacheSolve(a)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x = makeVector(1:10)
cachemean(x)
m
x
a
b
cacheSolve(b)
cacheSolve <- function(x, ...) { #takes matrix x and additional arguments for the solve function
m <- x$getinverse() #calls the getinverse function of matrix x and sets the result to local variable m
if(!is.null(m)) { #if m isnt null
message("getting cached data") #return message
return(m) #return cached inverse
}
data <- x$get() #if m is null, set data equal to matrix x
m <- solve(data, ...) #set local variable m to inverse of data and pass solve additional arguments
x$setmean(m) #set global value of m to inverse of data
m #return calculated inverse
}
cacheSolve(b)
b$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL #set the inverse to null
set <- function(y) { #caches matrix y to x and inverse matrix m to null
x <<- y
m <<- NULL
}
get <- function() x #returns the cached matrix x
setinverse <- function(inverse) m <<- inverse #sets the inverse matrix inverse to m
getinverse <- function() m #returns the inverse matrix m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b = makeCacheMatrix(a)
cacheSolve(b)
b$getinverse()
data = b$get
data
solve(data)
class(data)
data = b$get()
class(data)
solve(data)
m = solve(data)
b$setmean(m)
cacheSolve <- function(x, ...) { #takes matrix x and additional arguments for the solve function
m <- x$getinverse() #calls the getinverse function of matrix x and sets the result to local variable m
if(!is.null(m)) { #if m isnt null
message("getting cached data") #return message
return(m) #return cached inverse
}
data <- x$get() #if m is null, set data equal to matrix x
m <- solve(data, ...) #set local variable m to inverse of data and pass solve additional arguments
x$setinverse(m) #set global value of m to inverse of data
m #return calculated inverse
}
cacheSolve(b)
?traceback
debog(randu)
debug(randu)
?cat
debug(ln)
debug(lm)
lm(y~x)
ret.x
debug(lm)
lm(y~x)
library(datasets)
data(iris)
?data
?iris
head(iris)
head(iris[iris$Species == virginica])
head(iris[iris$Species == "virginica"])
head(iris[iris$Species == "setosa"])
head(iris[,iris$Species == "setosa"])
head(iris[,Species == "setosa"])
attach(iris)
head(iris[,Species == "setosa"])
head(iris[Species == "setosa",])
head(iris[Species == "virginica",])
head(iris[Species == "virginica",Sepal.Length])
?mean
head(iris[Species == "virginica",iris$Sepal.Length])
head(Sepal.Length[Species=="virginica"])
mean(Sepal.Length[Species=="virginica"])
colMeans(iris)
?apply
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
detach(iris)
?mtcars
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$hp[mtcars$cyl==8])
mean(mtcars$hp[mtcars$cyl==8]) - mean(mtcars$hp[mtcars$cyl==4])
?ls
debug(ls)
ls()
exit
?debug
?inverse
?solve
find.package()
install.packages("RMySQL")
ucscDB = dbConnect(MySQL(),user = "genome",host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL")
library(RMySQL)
ucscDB = dbConnect(MySQL(),user = "genome",host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDB,"show databases;",dbDisconnect(ucscDB))
result = dbGetQuery(ucscDB,"show databases;");dbDisconnect(ucscDB));
ucscDB = dbConnect(MySQL(),user = "genome",host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDB,"show databases;");dbDisconnect(ucscDB));
ucscDB = dbConnect(MySQL(),user = "genome",host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDB,"show databases;") ;dbDisconnect(ucscDB);
result
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createFile("example.h5")
library(rhdf5)
created = h5createFile("example.h5")
ls()
library(httr)
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
oauth_endpoints("github")
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
?Sys.setenv
Sys.setenv(GITHUB_CONSUMER_SECRET = "")
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
?sign_oauth1.0
? oauth_app
myapp <- oauth_app("github", "f86edfac0713f3a71dc7", secret = "42a42a8c733b6445d6989ee635c68ff5058737c0")
oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)#
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e", secret = "42a42a8c733b6445d6989ee635c68ff5058737c0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
Sys.setenv(secret = "42a42a8c733b6445d6989ee635c68ff5058737c0" )
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
Sys.setenv(GITHUB_CONSUMER_SECRET = "42a42a8c733b6445d6989ee635c68ff5058737c0" )
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
Sys.setenv(GITHUB_CONSUMER_SECRET = "42a42a8c733b6445d6989ee635c68ff5058737c0" )
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
Sys.setenv(GITHUB_CONSUMER_SECRET = "00ff9e1446994340cf7bc88ef8d9deb076699837" )
myapp <- oauth_app("github", "a8b894492c9e71587a4f13487626d78661cc2b0e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
myapp <- oauth_app("github", "56b637a5baffac62cad9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", "f86edfac0713f3a71dc7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
class(req)
req
json1 = content(content)
json1 = content(req)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
names(req)
json1 = content(req)#
json2 = jsonlite::fromJSON(toJSON(json1))
json2
names(json2)
head(json2)
names(json2)
json2[json2$names = datasharing]
json2[json2$names = "datasharing"]
json2[json2$names == "datasharing"]
json2[json2$name == "datasharing"]
json2[json2$name == "datasharing",]
?str
library(latice)
library(lattice)
x = rnorm(1:100)
y = rnorm(1:100)
y
rnorm(100)
xyplot(x,y)
?xyplot
z = as.data.frame(x,y)
z = as.data.frame("x" = x,"y" = y)
xyplot(x,y,z)
xyplot(y~x,z)
class(xyplot(y~x,z))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
environment(trellis.par.set())
environment(print.trellis())
?trellis.par.set()
?splom()
?print.trellis
library(datasets)
data(airquality)
data(airquality)
library(ggplot2)
data(airquality)
qplot(Wind,Ozone,data = airquality, facets = .~factor(Month))
airquality = transform(airquality,Month = factor(Month))
qplot(Wind,Ozone,data = airquality, facets = .~factor(Month))
qplot(Wind,Ozone,data = airquality, facets = .~Month)
?transform
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
?geom_smooth
?legend
?source
#Getting Data Project
setwd("/Users/student/Documents/Classes/JHDataScience/GettingData/Project/Repo/GettingData")
exists("UCI HAR Dataset")
?exists
exists("\UCI HAR Dataset")
exists(".\UCI HAR Dataset")
exists("~\UCI HAR Dataset")
exists("Zoo")
ls
ls()
getwd()
exists("/Zoo")
exists("~/Zoo")
main_dir = "/Users/student/Documents/Classes/JHDataScience/GettingData/Project/Repo/GettingData/UCI HAR Dataset"
setwd(main_dir)
exists("features.txt")
getwd()
list.files()
